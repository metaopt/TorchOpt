name: Wheel tests

on:
  pull_request:

jobs:
  deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: "recursive"
          fetch-depth: 1

      - name: Set up Python 3.7
        id: py37
        uses: actions/setup-python@v4
        with:
          python-version: "3.7"
          update-environment: false

      # - name: Set up Python 3.8
      #   id: py38
      #   uses: actions/setup-python@v4
      #   with:
      #     python-version: "3.8"
      #     update-environment: false

      # - name: Set up Python 3.9
      #   id: py39
      #   uses: actions/setup-python@v4
      #   with:
      #     python-version: "3.9"
      #     update-environment: false

      # - name: Set up Python 3.10
      #   id: py310
      #   uses: actions/setup-python@v4
      #   with:
      #     python-version: "3.10"
      #     update-environment: false

      - name: Set up Python executable paths
        run: |
          echo "${{ steps.py37.outputs.python-path }}" > .python-paths
          # echo "${{ steps.py38.outputs.python-path }}" >> .python-paths
          # echo "${{ steps.py39.outputs.python-path }}" >> .python-paths
          # echo "${{ steps.py310.outputs.python-path }}" >> .python-paths

      - name: Setup CUDA Toolkit
        uses: Jimver/cuda-toolkit@v0.2.7
        id: cuda-toolkit
        with:
          cuda: "11.6.2"
          method: network
          sub-packages: '["nvcc"]'
      - run: |
          echo "Installed CUDA version is: ${{steps.cuda-toolkit.outputs.cuda}}"
          echo "CUDA install location: ${{steps.cuda-toolkit.outputs.CUDA_PATH}}"
          nvcc -V

      - name: Build sdist and wheels
        run: |
          DEFAULT_PYTHON="$(head -n 1 .python-paths)"

          while read -r PYTHON; do
            echo "Building wheel with Python: ${PYTHON} ($("${PYTHON}" --version))"
            "${PYTHON}" -m pip install --upgrade pip setuptools wheel build
            if [[ "${PYTHON}" == "${DEFAULT_PYTHON}" ]]; then
              "${PYTHON}" -m build
            else
              "${PYTHON}" -m build --wheel
            fi
          done < .python-paths

      - name: List built sdist and wheels
        run: |
          if [[ -n "$(find dist -maxdepth 0 -not -empty -print 2>/dev/null)" ]]; then
            echo "Built sdist and wheels:"
            find dist -mindepth 1 | sort -V
          else
            echo "No sdist and wheels are built."
            exit 1
          fi

      - name: Test sdist and wheels
        run: |
          DEFAULT_PYTHON="$(head -n 1 .python-paths)"
          while read -r PYTHON; do
            PYVER="cp$("${PYTHON}" --version | cut -d ' ' -f2 | cut -d '.' -f-2 | tr -d '.')"
            mkdir -p "temp-${PYVER}"
            pushd "temp-${PYVER}"
            if [[ "${PYTHON}" == "${DEFAULT_PYTHON}" ]]; then
              echo "Testing sdist with Python: ${PYTHON} (${PYVER})"
              "${PYTHON}" -m pip uninstall torchopt -y
              "${PYTHON}" -m pip install ../dist/torchopt-*.tar.gz
              "${PYTHON}" -c 'import torchopt'
            fi
            echo "Testing wheel with Python: ${PYTHON} (${PYVER})"
            "${PYTHON}" -m pip uninstall torchopt -y
            "${PYTHON}" -m pip install ../dist/torchopt-*-${PYVER}-*.whl
            "${PYTHON}" -c 'import torchopt'
            "${PYTHON}" -m pip uninstall torchopt -y
            popd
          done < .python-paths

      - name: Publish to PyPI Test
        run: |
          DEFAULT_PYTHON="$(head -n 1 .python-paths)"
          "${DEFAULT_PYTHON}" -m pip install --upgrade twine
          "${DEFAULT_PYTHON}" -m twine upload \
            --repository testpypi \
            --username '__token__'
            --password "${{ secrets.TESTPYPI_UPLOAD_TOKEN }}"
            dist/*
