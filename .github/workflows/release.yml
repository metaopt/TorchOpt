name: Build

on:
  pull_request:
    paths:
      - setup.py
      - setup.cfg
      - pyproject.toml
      - MANIFEST.in
      - CMakeLists.txt
      - include/**
      - src/**
      - torchopt/version.py
  release:
    types:
      - created

permissions:
  contents: read

concurrency:
  group: "${{ github.ref }}"
  cancel-in-progress: ${{ github.event_name == 'pull_request' }}

jobs:
  build:
    runs-on: ubuntu-latest
    if: github.repository == 'metaopt/TorchOpt'
    timeout-minutes: 30
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: "recursive"
          fetch-depth: 1

      - name: Set up Python 3.7
        id: py37
        uses: actions/setup-python@v4
        with:
          python-version: "3.7"
          update-environment: false

      - name: Set up Python 3.8
        id: py38
        uses: actions/setup-python@v4
        with:
          python-version: "3.8"
          update-environment: false

      - name: Set up Python 3.9
        id: py39
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"
          update-environment: false

      - name: Set up Python 3.10
        id: py310
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"
          update-environment: false

      - name: Set up Python executable paths
        run: |
          echo "${{ steps.py37.outputs.python-path }}" > .python-paths
          echo "${{ steps.py38.outputs.python-path }}" >> .python-paths
          echo "${{ steps.py39.outputs.python-path }}" >> .python-paths
          echo "${{ steps.py310.outputs.python-path }}" >> .python-paths

      - name: Setup CUDA Toolkit
        uses: Jimver/cuda-toolkit@v0.2.7
        id: cuda-toolkit
        with:
          cuda: "11.6.2"
          method: network
          sub-packages: '["nvcc"]'
      - run: |
          echo "Installed CUDA version is: ${{steps.cuda-toolkit.outputs.cuda}}"
          echo "CUDA install location: ${{steps.cuda-toolkit.outputs.CUDA_PATH}}"
          nvcc -V

      - name: Build sdist and wheels
        run: |
          DEFAULT_PYTHON="$(head -n 1 .python-paths)"

          while read -r PYTHON; do
            echo "Building wheel with Python: ${PYTHON} ($("${PYTHON}" --version))"
            "${PYTHON}" -m pip install --upgrade pip setuptools wheel build
            if [[ "${PYTHON}" == "${DEFAULT_PYTHON}" ]]; then
              "${PYTHON}" -m build
            else
              "${PYTHON}" -m build --wheel
            fi
          done < .python-paths

      - name: List built sdist and wheels
        run: |
          if [[ -n "$(find dist -maxdepth 0 -not -empty -print 2>/dev/null)" ]]; then
            echo "Built sdist and wheels:"
            find dist -mindepth 1 | sort -V
          else
            echo "No sdist and wheels are built."
            exit 1
          fi

      - name: Test sdist and wheels
        run: |
          DEFAULT_PYTHON="$(head -n 1 .python-paths)"
          while read -r PYTHON; do
            PYVER="cp$("${PYTHON}" --version | cut -d ' ' -f2 | cut -d '.' -f-2 | tr -d '.')"
            mkdir -p "temp-${PYVER}"
            pushd "temp-${PYVER}"
            if [[ "${PYTHON}" == "${DEFAULT_PYTHON}" ]]; then
              echo "Testing sdist with Python: ${PYTHON} (${PYVER})"
              "${PYTHON}" -m pip uninstall torchopt -y
              "${PYTHON}" -m pip install ../dist/torchopt-*.tar.gz
              "${PYTHON}" -c 'import torchopt'
            fi
            echo "Testing wheel with Python: ${PYTHON} (${PYVER})"
            "${PYTHON}" -m pip uninstall torchopt -y
            "${PYTHON}" -m pip install ../dist/torchopt-*-${PYVER}-*.whl
            "${PYTHON}" -c 'import torchopt'
            "${PYTHON}" -m pip uninstall torchopt -y
            popd
          done < .python-paths

      - name: Check consistency between the package version and release tag
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          RELEASE_VER="${GITHUB_REF#refs/*/}"
          PACKAGE_VER="v$(python setup.py --version)"
          if [[ "${RELEASE_VER}" != "${PACKAGE_VER}" ]]; then
            echo "package ver. (${PACKAGE_VER}) != release ver. (${RELEASE_VER})"
            exit 1
          fi

      - name: Publish to PyPI Test
        if: startsWith(github.ref, 'refs/tags/')
        env:
          TWINE_USERNAME: "__token__"
          TWINE_PASSWORD: ${{ secrets.TESTPYPI_UPLOAD_TOKEN }}
        run: |
          [[ -n "${TWINE_PASSWORD}" ]] || exit 1
          PYTHON="$(head -n 1 .python-paths)"
          "${PYTHON}" -m pip install --upgrade twine
          "${PYTHON}" -m twine upload --repository testpypi dist/*

      - name: Publish to PyPI
        if: startsWith(github.ref, 'refs/tags/')
        env:
          TWINE_USERNAME: "__token__"
          TWINE_PASSWORD: ${{ secrets.PYPI_UPLOAD_TOKEN }}
        run: |
          [[ -n "${TWINE_PASSWORD}" ]] || exit 1
          PYTHON="$(head -n 1 .python-paths)"
          "${PYTHON}" -m twine upload --repository pypi dist/*
