name: pypi

on:
  release:
    types: [created]

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: "recursive"
          fetch-depth: 1

      - name: Set up Python 3.7
        id: py37
        uses: actions/setup-python@v4
        with:
          python-version: "3.7"
          update-environment: false

      - name: Set up Python 3.8
        id: py38
        uses: actions/setup-python@v4
        with:
          python-version: "3.8"
          update-environment: false

      - name: Set up Python 3.9
        id: py39
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"
          update-environment: false

      - name: Set up Python 3.10
        id: py310
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"
          update-environment: false

      - name: Set up Python executable paths
        run: |
          DEFAULT_PYTHON="${{ steps.py37.outputs.python-path }}"
          echo "DEFAULT_PYTHON='${DEFAULT_PYTHON}'" >> "${GITHUB_ENV}"

          PYTHON_EXECUTABLES="${{ steps.py37.outputs.python-path }}"
          PYTHON_EXECUTABLES="${PYTHON_EXECUTABLES}:${{ steps.py38.outputs.python-path }}"
          PYTHON_EXECUTABLES="${PYTHON_EXECUTABLES}:${{ steps.py39.outputs.python-path }}"
          PYTHON_EXECUTABLES="${PYTHON_EXECUTABLES}:${{ steps.py310.outputs.python-path }}"
          echo "PYTHON_EXECUTABLES='${PYTHON_EXECUTABLES}'" >> "${GITHUB_ENV}"

      - name: Check consistency between the package version and release tag
        run: |
          RELEASE_VER="${GITHUB_REF#refs/*/}"
          PACKAGE_VER="v$(python setup.py --version)"
          if [[ "${RELEASE_VER}" != "${PACKAGE_VER}" ]]; then
            echo "package ver. (${PACKAGE_VER}) != release ver. (${RELEASE_VER})"
            exit 1
          fi

      - name: Setup CUDA Toolkit
        uses: Jimver/cuda-toolkit@v0.2.7
        id: cuda-toolkit
        with:
          cuda: "11.7.0"
          method: network
          sub-packages: '["nvcc"]'
      - run: |
          echo "Installed CUDA version is: ${{steps.cuda-toolkit.outputs.cuda}}"
          echo "CUDA install location: ${{steps.cuda-toolkit.outputs.CUDA_PATH}}"
          nvcc -V

      - name: Build sdist and wheels
        run: |
          while IFS='' read -rd':' PYTHON || [[ -n "${PYTHON}" ]]; do
            [[ -z "${PYTHON}" ]] && continue
            echo "Building wheel with Python: ${PYTHON} ($("${PYTHON}" --version))"
            "${PYTHON}" -m pip install --upgrade pip setuptools wheel build
            if [[ "${PYTHON}" == "${DEFAULT_PYTHON}" ]]; then
              "${PYTHON}" -m build
            else
              "${PYTHON}" -m build --wheel
            fi
          done <<< "${PYTHON_EXECUTABLES}"

      - name: Publish to PyPI
        env:
          TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}
          TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
        run: |
          "${DEFAULT_PYTHON}" -m pip install --upgrade twine
          "${DEFAULT_PYTHON}" -m twine upload dist/*
